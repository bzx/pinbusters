function removePins(node) {

        // Parent container
        var object = node.closest('#rg_s');
        console.log(object);
        
        // Find all divs with images, define others
        var divs = object.querySelectorAll('.rg_bx'), 
            i,
            link,
            href,
            img,
            match,
            host;

        // Find the suspects
        for (i = 0; i < divs.length; ++i) {
            // Get the URL of the image from the href attribute of <a>
            link = divs[i].querySelector('.rg_l');
            href = unescape(link.getAttribute('href'));

            // Check if it matches Pinterest's url
            match = href.match(/https?\:\/\/(.+.pinimg\.com\/)/i);
            host  = match && match[1];  // Host will be null if no match is found
            console.log(host);

            // Remove
            if (host !== null) {
                // Remove the image node
                img  = link.querySelector('.rg_i');
                link.removeChild(img);

                
                // console.log(host);
            }
        }
}

// Observe DOM for changes
// Define the mutation observer
var observer = new MutationObserver(function (mutations) {
    for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];

        if (mutation.addedNodes && mutation.addedNodes.length > 0) {
            for (var j = 0; j < mutation.addedNodes.length; j++) {
                var newNode = mutation.addedNodes[j];

                if (newNode.nodeType === Node.ELEMENT_NODE) {
                    if (newNode.classList.contains('irc_mi') | newNode.classList.contains('irc_mut') | newNode.classList.contains('irc_ris')) {
                        removePins(newNode);
                    }
                }
            }
        }
    }
});

// Get options and start adding links
var options;
chrome.storage.sync.get(['options', 'defaultOptions'], function (storage) {
    options = Object.assign(storage.defaultOptions, storage.options);

    var objects = document.querySelectorAll('.rg_bx');
    for (var i = 0; i < objects.length; i++) {
        removePins(objects[i]);
    }

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
});

// var observer = new MutationObserver(function (mutations) {
//     mutations.forEach((mutation) => {
//         if (mutation.addedNodes && mutation.addedNodes.length > 0) {
//             for (var i = 0; i < mutation.addedNodes.length; i++) {
//                 var newNode = mutation.addedNodes[i];
//                 removePins(newNode);
//             }
//         }
//     });
// });

// observer.observe(document.body, {
//     childList: true,
//     subtree: true
// });

// Get rid of those pins
removePins(document.body);
